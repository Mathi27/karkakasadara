{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Mathi dev","text":"<ul> <li> Open Source Software Initiative</li> <li> Free Education for All</li> </ul> <p>Note</p> <ul> <li> Open for Contribution of Landing page ! </li> </ul> <p>This site is currently under active development. Contributors are welcome to join and support the effort!</p> CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre> <ul> <li> <p> Set up in 5 minutes</p> <p>Let's learn Programming</p> <p> Getting started</p> </li> <li> <p> It's just Markdown</p> <p>Contribute content </p> <p> Reference</p> </li> <li> <p> Made to measure</p> <p>Change the colors, fonts, language, icons, logo and more with a few lines</p> <p> Customization</p> </li> <li> <p> Open Source, MIT</p> <p>Material for MkDocs is licensed under MIT and available on [GitHub]</p> <p> License</p> </li> </ul> <p> checking mermaid</p> <pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre> <pre><code>classDiagram\n  Person &lt;|-- Student\n  Person &lt;|-- Professor\n  Person : +String name\n  Person : +String phoneNumber\n  Person : +String emailAddress\n  Person: +purchaseParkingPass()\n  Address \"1\" &lt;-- \"0..1\" Person:lives at\n  class Student{\n    +int studentNumber\n    +int averageMark\n    +isEligibleToEnrol()\n    +getSeminarsTaken()\n  }\n  class Professor{\n    +int salary\n  }\n  class Address{\n    +String street\n    +String city\n    +String state\n    +int postalCode\n    +String country\n    -validate()\n    +outputAsLabel()  \n  }</code></pre> <pre><code>erDiagram\n  CUSTOMER ||--o{ ORDER : places\n  ORDER ||--|{ LINE-ITEM : contains\n  LINE-ITEM {\n    string name\n    int pricePerUnit\n  }\n  CUSTOMER }|..|{ DELIVERY-ADDRESS : uses</code></pre> <ul> <li>This was marked (highlight)</li> <li>This was inserted (underline)</li> <li>This was deleted (strikethrough)</li> </ul>"},{"location":"AIML/01aiml/","title":"Introduction","text":"<p>Warning</p> <p>This is just an outline of the Closed-Form Solution content. The complete material will be uploaded under Math for Machine Learning by April 21, 2025.</p> <p>Author: mathiyuvarajan.dev@gmail.com</p>"},{"location":"AIML/01aiml/#closed-form-solution","title":"Closed-Form Solution","text":"<p>Understanding closed-form solutions is essential in mathematics, machine learning, and engineering.</p>"},{"location":"AIML/01aiml/#what-is-a-closed-form-solution","title":"What is a Closed-Form Solution?","text":"<p>A closed-form solution is an explicit equation or formula that can be evaluated in a finite number of operations using well-known functions (e.g., polynomials, exponentials, logarithms, trigonometric functions).</p> <p>In simple terms:</p> <p>If you can write the answer down as a neat equation, without needing iteration or approximation \u2014 that\u2019s a closed-form solution.</p>"},{"location":"AIML/01aiml/#formal-definition","title":"Formal Definition","text":"<p>A solution \\( x \\) is said to be closed-form if it can be expressed analytically using a finite number of: - algebraic operations (addition, subtraction, multiplication, division) - exponentials and logarithms - constants and known functions (e.g., sine, cosine)</p> <p>Mathematically:</p> <p>A function \\( f \\) is closed-form if:</p> \\[ f(x) = \\text{an expression involving only known operations/functions} \\]"},{"location":"AIML/01aiml/#examples","title":"Examples","text":""},{"location":"AIML/01aiml/#1-solving-a-linear-equation","title":"1. Solving a Linear Equation","text":"<p>Given:</p> \\[ ax + b = 0 \\] <p>The closed-form solution is:</p> \\[ x = -\\frac{b}{a} \\] <p>This is a classic closed-form solution \u2014 simple, direct, and doesn't require iteration.</p>"},{"location":"AIML/01aiml/#2-quadratic-equation","title":"2. Quadratic Equation","text":"<p>For:</p> \\[ ax^2 + bx + c = 0 \\] <p>The closed-form solution is:</p> \\[ x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} \\]"},{"location":"AIML/01aiml/#not-always-possible","title":"\u26a0\ufe0f Not Always Possible","text":"<p>Not all problems have a closed-form solution. For example, integrals like:</p> \\[ \\int e^{-x^2} dx \\] <p>do not have a closed-form solution using elementary functions, which is why the error function \\( \\text{erf}(x) \\) was defined.</p>"},{"location":"AIML/01aiml/#visuval","title":"Visuval","text":"<pre><code>graph TD\n    A[Math Problem] --&gt; B{Closed-Form Possible?}\n    B -- Yes --&gt; C[Write explicit formula]\n    B -- No --&gt; D[Use numerical methods or approximations]\n    D --&gt; E[Iterative algorithms, e.g., Gradient Descent]</code></pre>"},{"location":"C_Programming/01/","title":"Why Should I Care About C Programming?","text":"<p>C is a general-purpose programming language created by Dennis Ritchie at the Bell Laboratories in 1972.</p> <p>It is a very popular language, despite being old. The main reason for its popularity is because it is a fundamental language in the field of computer science.</p> <p>C is strongly associated with UNIX, as it was developed to write the UNIX operating system.</p>"},{"location":"C_Programming/01/#why-learn-c","title":"Why Learn C?","text":"<p>It is one of the most popular programming languages in the world.</p> <p>If you know C, you will have no problem learning other popular programming languages such as Java, Python, C++, C#, etc, as the syntax is similar.</p> <p>C is very fast, compared to other programming languages, like Java and Python.</p> <p>C is very versatile; it can be used in both applications and technologies.</p>"},{"location":"C_Programming/01/#difference-between-c-and-c","title":"Difference between C and C++","text":"<p>C++ was developed as an extension of C, and both languages have almost the same syntax</p> <p>The main difference between C and C++ is that C++ supports classes and objects, while C does not.</p>"},{"location":"C_Programming/01/#lets-get-started","title":"Let's get started !","text":""},{"location":"C_Programming/02/","title":"History of C Programming","text":""},{"location":"C_Programming/02/#origins","title":"Origins","text":"<ul> <li>1969-1973: Developed by Dennis Ritchie at Bell Labs (AT&amp;T) as a successor to the B language.</li> <li>Purpose: To create a language for writing the UNIX operating system.</li> <li>Influenced by BCPL (Basic Combined Programming Language) and B language.</li> </ul>"},{"location":"C_Programming/02/#key-milestones","title":"Key Milestones","text":"<ul> <li>1972: C language was born, named as a successor to B.</li> <li>1978: Publication of \"The C Programming Language\" by Brian Kernighan and Dennis Ritchie (often referred to as K&amp;R C).</li> <li>1989: Standardized by ANSI as ANSI C (C89).</li> <li>1990: Adopted by ISO as ISO C (C90).</li> <li>1999: C99 standard introduced new features like <code>//</code> comments, <code>inline</code> functions, and variable-length arrays.</li> <li>2011: C11 standard added support for multi-threading, atomic operations, and more.</li> <li>2018: C18 (C17) standard, a minor update to fix defects in C11.</li> </ul>"},{"location":"C_Programming/02/#impact","title":"Impact","text":"<ul> <li>Foundation for many modern languages like C++, Java, C#, and Python.</li> <li>Widely used in system programming, embedded systems, and operating systems (e.g., Linux, Windows).</li> <li>Remains one of the most popular and influential programming languages.</li> </ul>"},{"location":"C_Programming/02/#key-features","title":"Key Features","text":"<ul> <li>Procedural language: Focuses on functions and structured programming.</li> <li>Low-level access: Allows direct memory manipulation via pointers.</li> <li>Portability: Can run on various hardware platforms with minimal changes.</li> </ul> <p>Source : Bell Labs</p>"},{"location":"C_Programming/03/","title":"Characteristics of C","text":"<p>Structured Programming Language:    - Allows modular design with functions and loops for organized code.</p> <p>Low-Level Access:    - Provides access to hardware-level features via pointers and direct memory manipulation.</p> <p>Rich Library Support:    - Offers a variety of built-in functions for tasks like math, I/O, and string handling.</p> <p>Portable:    - Code written in C is highly portable across different hardware and operating systems.</p> <p>Efficient and Fast:    - Due to its low-level nature, C programs run quickly with minimal overhead.</p> <p>Powerful Operators:    - Includes a wide range of operators like arithmetic, relational, logical, and bitwise.</p> <p>Extensibility:    - Users can add custom libraries or functions to extend its capabilities.</p> <p>Procedural Language:    - Follows a procedural approach, emphasizing sequence, selection, and iteration.</p> <p>Memory Management:    - Provides dynamic memory allocation using <code>malloc()</code>, <code>calloc()</code>, and <code>free()</code>.</p>"},{"location":"C_Programming/04/","title":"Applications of C in Embedded Systems","text":"<p>System Programming:    - Development of operating systems, kernels, and embedded systems.    - Example: UNIX and Linux.</p> <p>Embedded Systems:    - Used in microcontrollers, IoT devices, and automotive systems for hardware interfacing.</p> <p>Game Development:    - Provides high performance and close-to-hardware access for game engines.</p> <p>Compiler Design:    - Many modern programming language compilers are written in C.</p> <p>Desktop Applications:    - Development of GUI-based and command-line applications.</p> <p>Database Systems:    - Database engines like MySQL are developed using C.</p> <p>Network Programming:    - Useful in developing network protocols, socket programming, and packet filtering.</p> <p>Graphics and GUI Applications:    - Libraries like OpenGL and DirectX use C for graphics-heavy tasks.</p> <p>Scientific Research:    - Numerical and computational libraries like MATLAB are built using C for high precision.</p> <p>High-Performance Libraries:     - Used for creating libraries in machine learning, AI, and mathematical computations.</p>"},{"location":"C_Programming/05/","title":"Structure of a C Program","text":"<p>Basic Structure &amp; Syntax:</p> <p>Programming in C involves following a basic structure throughout. Here\u2019s what it can be broken down to.</p> <p>Pre-processor commands</p> <ul> <li>Functions</li> <li>Variables</li> <li>Statements</li> <li>Expressions</li> <li>Comments</li> </ul>"},{"location":"C_Programming/05/#pre-processor-commands","title":"Pre-processor commands","text":"<p>Pre-processor commands are commands which tell our program that before its execution, it must include the file name mentioned in it because we are using some of the commands or codes from this file.</p> <p>They add functionalities to a program.</p> <p>One example could be,</p> <p><pre><code>#include &lt;math.h&gt;\n</code></pre> We include math.h to be able to use some special functions like power and absolute. #include is how we include them into our programs. <p>Detailed explanations of everything else in the structure will follow in the later part of the tutorial.</p>"},{"location":"C_Programming/05/#header-files","title":"Header files:","text":"<p>It is always declares on heading side of program hence it is called header file</p> <p>\u00b7       It is identified with the extension(.h)</p> <p>\u00b7       It gets installed while installing IDE(integrated development environment)</p> <p>\u00b7       It stores functions as per their categories hence they are called library</p>"},{"location":"C_Programming/05/#syntax","title":"Syntax","text":"<p>An example below shows how a basic C program is written. <pre><code>#include&lt;stdio.h&gt;  \nint main(){\n   printf(\"Hello World\\n\");\n   return 0;\n}\n</code></pre> - Here, the first line is a pre-processor command including a header file stdio.h. - C ignores empty lines and spaces. - There is a main() function then, which should always be there.</p> <p>A C program is made up of different tokens combined. These tokens include:</p> <ol> <li>Keywords</li> <li>Identifiers</li> <li>Constants</li> <li>String Literal</li> <li>Symbols</li> </ol>"},{"location":"C_Programming/05/#keywords","title":"Keywords","text":"<p>Keywords are reserved words that can not be used elsewhere in the program for naming a variable or a function. They have a specific function or task and they are solely used for that. Their functionalities are pre-defined.</p> <p>One such example of a keyword could be return which is used to build return statements for functions. Other examples are auto, if, default, etc.</p> <p>Whenever we write any keyword in IDE  their colour slightly changes and it looks different from other variables or functions for example in turbo c all keywords are turns into white colour .</p>"},{"location":"C_Programming/05/#identifiers","title":"Identifiers","text":"<p>Identifiers are names given to variables or functions to differentiate them from one another. Their definitions are solely based on our choice but there are a few rules that we have to follow while naming identifiers. One such rule says that the name can not contain special symbols such as @, -, *, &lt;, etc.</p> <p>C is a case-sensitive language so an identifier containing a capital letter and another one containing a small letter in the same place will be different. For example, the three words: Code, code, and cOde can be used as three different identifiers.</p>"},{"location":"C_Programming/05/#rules-for-naming-identifier-","title":"Rules for naming identifier-","text":"<ol> <li> <p>One should not name any identifier starting with numeric value or symbol. It should start only with underscore or alphabet.</p> </li> <li> <p>They should not contain space.</p> </li> <li> <p>Giving logical names is recommended as per our program.</p> </li> </ol>"},{"location":"C_Programming/05/#constants","title":"Constants","text":"<p>Constants are very similar to a variable and they can also be of any data type. The only difference between a constant and a variable is that a constant\u2019s value never changes.  We will see constants in more detail in the upcoming tutorial.</p>"},{"location":"C_Programming/05/#string-literal","title":"String Literal","text":"<p>String literals or string constants are a sequence of characters enclosed in double quotation marks. For example,  \u201cThis is a string literal!\u201d is a string literal. C method printf() utilizes the same to format the output.</p>"},{"location":"C_Programming/06/","title":"C Comments","text":"<p>Comments can be used to insert any informative piece which a programmer does not wish to be executed. It could be either to explain a piece of code or to make it more readable. In addition, it can be used to prevent the execution of alternative code when the process of debugging is done.</p> <p>Comments can be singled-lined or multi-lined.</p>"},{"location":"C_Programming/06/#single-line-comments","title":"Single Line Comments","text":"<ul> <li>Single-line comments start with two forward slashes (//).</li> <li>Any information after the slashes // lying on the same line would be ignored (will not be executed).</li> </ul>"},{"location":"C_Programming/06/#an-example-of-how-we-use-a-single-line-comment","title":"An example of how we use a single-line comment","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    //This is a single line comment\n    printf(\"Hello World!\");\n    return 0;\n}\n</code></pre>"},{"location":"C_Programming/06/#multi-line-comments","title":"Multi-line comments","text":"<ul> <li>A multi-line comment starts with /* and ends with */.</li> <li>Any information between /* and */ will be ignored by the compiler.</li> </ul>"},{"location":"C_Programming/06/#an-example-of-how-we-use-a-multi-line-comment","title":"An example of how we use a Multi-line comment","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    /* This is a\n    multi-line\n    comment */\n    printf(\"Hello World!\");\n    return 0;\n}\n</code></pre>"},{"location":"C_Programming/07/","title":"Pointers","text":"<pre><code>graph TB\n    subgraph CPU\n        A[CPU] --&gt;|Send Address| B[Instruction Address Bus]\n        A --&gt;|Send/Receive Address| D[Data Address Bus]\n        A --&gt;|Send/Receive Data| E[Data Bus]\n        A --&gt;|Control Signal| F[Read/Write Wire]\n    end\n\n    subgraph Memory\n        B --&gt;|Fetch Instruction| C[Instruction Memory]\n        D --&gt;|Access Data| G[Data Memory]\n    end\n\n    C --&gt;|Send Instruction| A\n    G --&gt;|Send/Store Data| A\n</code></pre>"},{"location":"C_Programming/08/","title":"Design Methodologies in C","text":"<p>int main(){</p> <pre><code>return 0;\n</code></pre> <p>}</p>"},{"location":"C_Programming/09/","title":"Basic Concepts","text":""},{"location":"C_Programming/10/","title":"Operators","text":""},{"location":"C_Programming/11/","title":"Control Flow","text":""},{"location":"C_Programming/12/","title":"Functions","text":""},{"location":"C_Programming/13/","title":"Arrays","text":""},{"location":"C_Programming/14/","title":"Strings","text":""},{"location":"C_Programming/15/","title":"Pointers","text":""},{"location":"C_Programming/16/","title":"Structures","text":""},{"location":"C_Programming/17/","title":"Unions","text":""},{"location":"C_Programming/18/","title":"Preprocessing Directives in C","text":""},{"location":"C_Programming/19/","title":"File Handling","text":""},{"location":"C_Programming/20/","title":"Dynamic Memory Allocation","text":""},{"location":"C_Programming/21/","title":"Importance of <code>&lt;stdint.h&gt;</code>","text":""},{"location":"C_Programming/22/","title":"Embedded C Code Analysis","text":""},{"location":"C_Programming/23/","title":"Embedded-Specific Constraints and Optimizations","text":""},{"location":"C_Programming/24/","title":"Memory Management in Embedded Systems","text":""},{"location":"C_Programming/25/","title":"Coding Standards","text":""},{"location":"EmbeddedSystems/01Es/","title":"Hardware &amp; Firebase Integration","text":""},{"location":"EmbeddedSystems/01Es/#firebase-realtime-db-hardware","title":"Firebase Realtime DB + Hardware","text":""},{"location":"EmbeddedSystems/01Es/#firebase-configuration","title":"Firebase Configuration","text":"<p>You need these 2 DB URL and API KEY</p> <ol> <li>Database URL: </li> <li>Format: <code>https://[PROJECT-ID].firebaseio.com</code></li> <li> <p>Found in: Firebase Console \u2192 Realtime Database \u2192 (Copy URL from top)</p> </li> <li> <p>API Key:</p> </li> <li>Found in: Project Settings \u2192 General \u2192 Web API Key</li> </ol> <p>Add Firebase Host <pre><code>#define FIREBASE_HOST \"https://your-project.firebaseio.com/\"\n</code></pre> Add Firebase API KEY <pre><code>#define FIREBASE_API_KEY \"YOUR_WEB_API_KEY\"`\n</code></pre></p>"},{"location":"EmbeddedSystems/01Es/#mandatory-initialization-steps","title":"Mandatory Initialization Steps","text":"<ol> <li>Configure Firebase Objects:</li> </ol> <pre><code>FirebaseData fbdo; // Data transfer object\nFirebaseConfig config; // Connection config\nFirebaseAuth auth; // Authentication\n\nconfig.database_url = FIREBASE_HOST;\nconfig.api_key = FIREBASE_API_KEY;\n</code></pre> <p>2.Establish Connection</p> <pre><code>Firebase.begin(&amp;config, &amp;auth);\nFirebase.reconnectWiFi(true); // Auto-reconnect if WiFi drops\n</code></pre> <p>3.Basic Database Operations</p>"},{"location":"EmbeddedSystems/01Es/#core-operations-table","title":"Core Operations Table","text":"Operation Method Example Write data <code>set&lt;Type&gt;()</code> <code>Firebase.setFloat(fbdo, \"/temperature\", 25.5)</code> Read data <code>get&lt;Type&gt;()</code> <code>Firebase.getInt(fbdo, \"/counter\")</code> Update data <code>updateNode()</code> <code>Firebase.updateNode(fbdo, \"/sensors\", data)</code> Check success <code>.success()</code> <code>if(fbdo.success()){...}</code> <p>4.Error Handling Essentials</p>"},{"location":"EmbeddedSystems/01Es/#critical-error-checks","title":"Critical Error Checks","text":"<p>Always verify operations:</p> <pre><code>if(!Firebase.setFloat(fbdo, \"/data\", value)){\n  Serial.println(\"Error: \" + fbdo.errorReason());\n}\n</code></pre> <p>If You face this common Error. Dont Panic. Check for following things: </p> <p>Note</p> <ul> <li>Permission denied (check Firebase Rules) </li> <li>Network issues</li> <li>Invalid data paths</li> </ul>"},{"location":"EmbeddedSystems/01Es/#5-security-rules-minimum-for-testing","title":"5. Security Rules (Minimum for Testing)","text":""},{"location":"EmbeddedSystems/01Es/#starter-security-rules","title":"Starter Security Rules","text":"<p>For development only (in Firebase Console \u2192 Realtime Database \u2192 Rules): <pre><code>{\n  \"rules\": {\n    \".read\": true,\n    \".write\": true\n  }\n}\n</code></pre></p>"},{"location":"EmbeddedSystems/01Es/#6-sample-code-breakdown","title":"6. Sample Code Breakdown","text":""},{"location":"EmbeddedSystems/01Es/#minimal-working-example","title":"Minimal Working Example","text":"<pre><code>#include &lt;FirebaseESP32.h&gt;\n\n#define FIREBASE_HOST \"YOUR_DB_URL\"\n#define FIREBASE_API_KEY \"YOUR_KEY\"\n\nFirebaseData fbdo;\nFirebaseConfig config;\nFirebaseAuth auth;\n\nvoid setup(){\n  config.database_url = FIREBASE_HOST;\n  config.api_key = FIREBASE_API_KEY;\n\n  Firebase.begin(&amp;config, &amp;auth);\n}\n\nvoid loop(){\n  Firebase.setInt(fbdo, \"/test\", millis());\n  delay(1000);\n}\n</code></pre>"},{"location":"EmbeddedSystems/01Es/#sample-code","title":"Sample Code:","text":"<pre><code>#include &lt;WiFi.h&gt;\n#include &lt;FirebaseESP32.h&gt;\n\n// Helper files for Firebase\n#include \"addons/TokenHelper.h\"    // For token generation\n#include \"addons/RTDBHelper.h\"     // For database operations\n\n// 1. WiFi Configuration ----------------------------------\nconst char* WIFI_SSID = \"Your_WiFi_SSID\";\nconst char* WIFI_PASSWORD = \"Your_WiFi_Password\";\n\n// 2. Firebase Configuration ------------------------------\n#define API_KEY \"Your_Firebase_API_Key\"\n#define DATABASE_URL \"Your_Firebase_Database_URL\"\n\n// 3. Firebase Objects ------------------------------------\nFirebaseData fbData;       // For data transfer\nFirebaseAuth auth;         // For authentication\nFirebaseConfig config;     // For connection settings\n\nvoid setup() {\n  // Initialize Serial Monitor\n  Serial.begin(115200);\n\n  // 4. Connect to WiFi -----------------------------------\n  Serial.print(\"Connecting to WiFi\");\n  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);\n\n  while (WiFi.status() != WL_CONNECTED) {\n    Serial.print(\".\");\n    delay(300);\n  }\n\n  Serial.println();\n  Serial.print(\"Connected with IP: \");\n  Serial.println(WiFi.localIP());\n  Serial.println();\n\n  // 5. Firebase Setup ------------------------------------\n  Serial.printf(\"Firebase Client v%s\\n\", FIREBASE_CLIENT_VERSION);\n\n  // Assign API key and database URL\n  config.api_key = API_KEY;\n  config.database_url = DATABASE_URL;\n\n  // Optional: Email/password authentication\n  // auth.user.email = \"user@email.com\";\n  // auth.user.password = \"password\";\n\n  // Set token callback function\n  config.token_status_callback = tokenStatusCallback;\n\n  // Initialize Firebase\n  Firebase.begin(&amp;config, &amp;auth);\n  Firebase.reconnectWiFi(true);\n\n  // Wait for connection\n  Serial.print(\"Connecting to Firebase\");\n  while (!Firebase.ready()) {\n    Serial.print(\".\");\n    delay(300);\n  }\n  Serial.println();\n  Serial.println(\"Connected to Firebase!\");\n}\n\nvoid loop() {\n  // 6. Sending Data to Firebase --------------------------\n  // Generate sample data (replace with your sensor data)\n  int sampleValue = random(0, 100); \n\n  // Path where data will be stored\n  String path = \"/sensor/value\"; \n\n  // Send integer to Firebase\n  if (Firebase.setInt(fbData, path, sampleValue)) {\n    Serial.println(\"Data sent successfully!\");\n    Serial.print(\"Path: \"); Serial.println(path);\n    Serial.print(\"Value: \"); Serial.println(sampleValue);\n  } else {\n    Serial.println(\"Failed to send data\");\n    Serial.println(\"Reason: \" + fbData.errorReason());\n  }\n\n  delay(2000); // Wait 2 seconds between updates\n}\n</code></pre>"},{"location":"GettingStarted/01overview/","title":"Overview of Embedded Systems","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre>"},{"location":"GettingStarted/02installation/","title":"Installation","text":"Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource"},{"location":"GettingStarted/03first-steps/","title":"First Steps","text":"<ul> <li> <p>Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur   accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh   lacinia sed. Aenean in finibus diam.</p> <ul> <li>Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis.</li> <li>Nam vulputate tincidunt fringilla.</li> <li>Nullam dignissim ultrices urna non auctor.</li> </ul> </li> <li> <p> Lorem ipsum dolor sit amet, consectetur adipiscing elit</p> </li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Praesent sed risus massa</li> </ul> </li> <li> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</li> </ul>"},{"location":"Git/01_Configuration/","title":"Getting Started with Git","text":"<p>Git is a distributed version control system that helps you manage your repositories efficiently. Follow these steps to set up and start using Git on your computer.</p>"},{"location":"Git/01_Configuration/#setting-up-git","title":"Setting Up Git","text":"<p>To get started with Git, you need to:</p> <ol> <li>Download Git: Install Git on your computer from the official source.</li> <li>Configure Git: Set up your username and email to associate commits with your identity.</li> </ol> <p>Download Git</p>"},{"location":"Git/01_Configuration/#using-git","title":"Using Git","text":"<p>Once Git is installed, you can use it from the command line to manage your repositories. You can also enhance your workflow by installing the GitHub CLI to interact with GitHub directly from the terminal.</p>"},{"location":"Git/01_Configuration/#helpful-links","title":"Helpful Links:","text":"<ul> <li>Git Documentation: Comprehensive guide to Git commands and features.</li> <li>GitHub CLI: Explore GitHub's CLI tool for seamless integration.</li> </ul> <p>Start managing your projects with the power of Git and GitHub!</p>"},{"location":"Git/02_setUserName/","title":"Setting your username in Git","text":"<p>Git uses a username to associate commits with an identity. The Git username is not the same as your GitHub username.</p> Windows <p>You can change the name that is associated with your Git commits using the git config command. The new name you set will be visible in any future commits you push to GitHub from the command line. If you'd like to keep your real name private, you can use any text as your Git username.</p> <p>Changing the name associated with your Git commits using git config will only affect future commits and will not change the name used for past commits.</p> <p>Setting your Git username for every repository on your computer</p> <ul> <li> Open git bash</li> <li> Set a Git username :   <pre><code>git config --global user.name \"Your Github UserName\"\n</code></pre></li> <li> Confirm that you have set the Git username correctly:   <pre><code>$ git config --global user.name\n</code></pre> <p>Your UserName</p> </li> </ul> Mac <ul> <li> Open Mac Terminal</li> <li> Set a Git username :   <pre><code>git config --global user.name \"Your Github UserName\"\n</code></pre></li> <li> Confirm that you have set the Git username correctly:   <pre><code>$ git config --global user.name\n</code></pre> <p>Your UserName</p> </li> </ul> Linux <ul> <li> Open Linux Terminal</li> <li> Set a Git username :   <pre><code>git config --global user.name \"Your Github UserName\"\n</code></pre></li> <li> Confirm that you have set the Git username correctly:   <pre><code>$ git config --global user.name\n</code></pre> <p>Your UserName</p> </li> </ul>"},{"location":"Git/03_cachingCredentials/","title":"Caching your GitHub credentials in Git","text":"<p>If you're cloning GitHub repositories using HTTPS, we recommend you use GitHub CLI or Git Credential Manager (GCM) to remember your credentials.</p>"},{"location":"Git/03_cachingCredentials/#github-cli","title":"GitHub CLI","text":"<p>GitHub CLI will automatically store your Git credentials for you when you choose HTTPS as your preferred protocol for Git operations and answer \"yes\" to the prompt asking if you would like to authenticate to Git with your GitHub credentials.</p> <ul> <li> Install GitHub CLI on macOS, Windows, or Linux.</li> <li> In the command line, enter gh auth login, then follow the prompts.<ul> <li>When prompted for your preferred protocol for Git operations, select HTTPS.</li> <li>When asked if you would like to authenticate to Git with your GitHub credentials, enter Y.</li> </ul> </li> </ul>"},{"location":"Git/03_cachingCredentials/#git-credential-manager","title":"Git Credential Manager","text":"<p>Git Credential Manager (GCM) is another way to store your credentials securely and connect to GitHub over HTTPS. With GCM, you don't have to manually create and store a personal access token, as GCM manages authentication on your behalf, including 2FA (two-factor authentication).</p> <ul> <li> <p> Install Git for Windows, which includes GCM. For more information, see Git for Windows releases from its releases page.</p> </li> <li> <p> It is recommend always installing the latest version. At a minimum, install version 2.29 or higher, which is the first version offering OAuth support for GitHub.</p> </li> <li> <p> The next time you clone an HTTPS URL that requires authentication, Git will prompt you to log in using a browser window. You may first be asked to authorize an OAuth app. If your account or organization requires two-factor auth, you'll also need to complete the 2FA challenge.</p> </li> <li> <p> Once you've authenticated successfully, your credentials are stored in the Windows credential manager and will be used every time you clone an HTTPS URL. Git will not require you to type your credentials in the command line again unless you change your credentials.</p> </li> </ul> <p>Warning</p> <p>Older versions of Git for Windows came with Git Credential Manager for Windows. This older product is no longer supported and cannot connect to GitHub via OAuth. We recommend you upgrade to the latest version of Git for Windows.</p>"},{"location":"Git/04_git_workflow/","title":"Git Workflow","text":"<p>A typical Git workflow involves the following stages:</p> <ul> <li>Working Directory: The files in your project folder that you edit.</li> <li>Staging Area: A place where changes are staged (indexed) before committing.</li> <li>Repository (Local): A local database that tracks your project's history.</li> <li>Remote Repository: A shared repository hosted on platforms like GitHub, GitLab, or Bitbucket.</li> </ul>"},{"location":"Git/04_git_workflow/#steps-in-a-git-workflow","title":"Steps in a Git Workflow","text":"<ul> <li>Modify files in the working directory.</li> <li>Stage changes using git add to move them to the staging area.</li> <li>Commit staged changes with git commit to save them to the local repository.</li> <li>Push commits to the remote repository using git push.</li> <li>Fetch or pull updates from the remote repository when needed.</li> </ul> <pre><code>graph TD\n    A[Working Directory] --&gt;|git add| B[Staging Area]\n    B --&gt;|git commit| C[Local Repository]\n    C --&gt;|git push| D[Remote Repository]\n    D --&gt;|git pull/fetch| C</code></pre>"},{"location":"Git/04_git_workflow/#explanation-of-the-diagram","title":"Explanation of the Diagram","text":"<ol> <li>Working Directory: This is where you create or modify files.</li> <li>Staging Area: Staging lets you prepare changes for the next commit.</li> <li>Local Repository: Commits are saved locally, forming the project's history.</li> <li>Remote Repository: You push changes to share your work with others or back it up.</li> </ol>"},{"location":"Git/04_git_workflow/#few-git-commands","title":"Few Git Commands","text":"<p>Initialize a Git repository </p> <pre><code>git init\n</code></pre> <p>Stage changes <pre><code>git add &lt;file-name&gt; \n</code></pre> Commit Changes <pre><code>git commit -m \"Commit message\"\n</code></pre> Push to github or any provider repo <pre><code>git push origin main\n</code></pre> Pull from github or any online provider  <pre><code>git pull origin main\n</code></pre></p>"},{"location":"Git/05_git_commands/","title":"Git Commands for Beginners (Explained Like You're 5 year old !)","text":"<p>Git is like a magic notebook for your code. It helps you save your work, look back at older versions, and share your projects with friends. Let\u2019s break it down step by step.</p>"},{"location":"Git/05_git_commands/#important-git-terminology-simple-words","title":"Important Git Terminology (Simple Words)","text":"<ul> <li>Repository (Repo): A folder where Git keeps track of all your files and their history. Think of it like your magical chest where all your treasure (code) is stored.</li> <li>Working Directory: The place where you work on your files. It\u2019s like your playground.</li> <li>Staging Area: A clipboard where you put the things you want to save.</li> <li>Commit: Taking a snapshot of your work and saving it in your repo chest.</li> <li>Remote: Your treasure chest in the cloud where everyone can see or work with your files.</li> <li>Push: Sending your work from your computer to the cloud.</li> <li>Pull: Bringing work from the cloud to your computer.</li> <li>Branch: A copy of your playground where you can play without messing up the main playground.</li> <li>Merge: Combining your playground with the main playground.</li> </ul>"},{"location":"Git/05_git_commands/#basic-git-workflow","title":"Basic Git Workflow","text":"<p>This is how Git works:</p> <ol> <li> <p>You work on your files.</p> </li> <li> <p>You decide what changes to keep (stage them).</p> </li> <li> <p>You save a snapshot (commit).</p> </li> <li> <p>You share it with the world (push).</p> </li> </ol>"},{"location":"Git/05_git_commands/#git-workflow","title":"Git Workflow","text":"<pre><code>graph TD\n    A[Working Directory] --&gt;|git add| B[Staging Area]\n    B --&gt;|git commit| C[Local Repository]\n    C --&gt;|git push| D[Remote Repository]\n    D --&gt;|git pull| C</code></pre>"},{"location":"Git/05_git_commands/#git-commands-all-the-magic-words-you-need","title":"Git Commands (All the Magic Words You Need)","text":""},{"location":"Git/05_git_commands/#1-setup-commands-tell-git-who-you-are","title":"1. Setup Commands (Tell Git who you are)","text":""},{"location":"Git/05_git_commands/#set-your-name","title":"Set your name","text":"<pre><code>git config --global user.name \"Your Name\"\n</code></pre>"},{"location":"Git/05_git_commands/#set-your-email","title":"Set your email","text":"<pre><code>git config --global user.email \"your.email@example.com\"\n</code></pre>"},{"location":"Git/05_git_commands/#2-starting-a-project","title":"2. Starting a Project","text":""},{"location":"Git/05_git_commands/#create-a-new-git-repo","title":"Create a new Git repo","text":"<pre><code>git init\n</code></pre>"},{"location":"Git/05_git_commands/#clone-a-repo-copy-it-from-the-cloud-to-your-computer","title":"Clone a repo (copy it from the cloud to your computer)","text":"<pre><code>git clone &lt;repo-url&gt;\n</code></pre>"},{"location":"Git/05_git_commands/#3-staging-and-committing","title":"3. Staging and Committing","text":""},{"location":"Git/05_git_commands/#check-the-status-of-your-files","title":"Check the status of your files","text":"<pre><code>git status\n</code></pre>"},{"location":"Git/05_git_commands/#add-a-single-file-to-the-staging-area","title":"Add a single file to the staging area","text":"<pre><code>git add &lt;file-name&gt;\n</code></pre>"},{"location":"Git/05_git_commands/#add-all-files-to-the-staging-area","title":"Add all files to the staging area","text":"<pre><code>git add .\n</code></pre>"},{"location":"Git/05_git_commands/#commit-the-staged-changes","title":"Commit the staged changes","text":"<pre><code>git commit -m \"A description of what I did\"\n</code></pre>"},{"location":"Git/05_git_commands/#pushing-and-pulling","title":"Pushing and Pulling","text":""},{"location":"Git/05_git_commands/#push-changes-to-the-remote-repo","title":"Push changes to the remote repo","text":"<pre><code>git push origin main\n</code></pre>"},{"location":"Git/05_git_commands/#pull-changes-from-the-remote-repo","title":"Pull changes from the remote repo","text":"<pre><code>git pull origin main\n</code></pre>"},{"location":"Git/05_git_commands/#5-branching-and-merging","title":"5. Branching and Merging","text":""},{"location":"Git/05_git_commands/#create-a-new-branch","title":"Create a new branch","text":"<pre><code>git branch &lt;branch-name&gt;\n</code></pre>"},{"location":"Git/05_git_commands/#switch-to-a-branch","title":"Switch to a branch","text":"<pre><code>git checkout &lt;branch-name&gt;\n</code></pre>"},{"location":"Git/05_git_commands/#merge-a-branch-into-the-main-branch","title":"Merge a branch into the main branch","text":"<pre><code>git merge &lt;branch-name&gt;\n</code></pre>"},{"location":"Git/05_git_commands/#6-viewing-history","title":"6. Viewing History","text":""},{"location":"Git/05_git_commands/#show-commit-history","title":"Show commit history","text":"<pre><code>git log\n</code></pre>"},{"location":"Git/05_git_commands/#show-a-simplified-one-line-history","title":"Show a simplified one-line history","text":"<pre><code>git log --oneline\n</code></pre>"},{"location":"Git/05_git_commands/#7-undoing-changes","title":"7. Undoing Changes","text":""},{"location":"Git/05_git_commands/#unstage-a-file-remove-from-staging","title":"Unstage a file (remove from staging)","text":"<pre><code>git reset &lt;file-name&gt;\n</code></pre>"},{"location":"Git/05_git_commands/#undo-the-last-commit-but-keep-changes","title":"Undo the last commit but keep changes","text":"<pre><code>git reset --soft HEAD~1\n</code></pre>"},{"location":"Git/05_git_commands/#undo-the-last-commit-and-delete-changes","title":"Undo the last commit and delete changes","text":"<pre><code>git reset --hard HEAD~1\n</code></pre>"},{"location":"Git/05_git_commands/#8-working-with-remotes","title":"8. Working with Remotes","text":""},{"location":"Git/05_git_commands/#add-a-remote-repo","title":"Add a remote repo","text":"<pre><code>git remote add origin &lt;repo-url&gt;\n</code></pre>"},{"location":"Git/05_git_commands/#view-remotes","title":"View remotes","text":"<pre><code>git remote -v\n</code></pre>"},{"location":"Git/05_git_commands/#remove-a-remote","title":"Remove a remote","text":"<pre><code>git remote remove origin\n</code></pre>"},{"location":"Git/05_git_commands/#branching-and-merging","title":"Branching and Merging","text":"<pre><code>gitGraph\n    commit id: \"Start\"\n    branch new-feature\n    checkout new-feature\n    commit id: \"Add Feature\"\n    checkout main\n    commit id: \"Bug Fix\"\n    merge new-feature</code></pre>"},{"location":"Git/06_setup_Github/","title":"How to Create a GitHub Account, Repository, and Personal Access Token (PAT)","text":"<p>This guide will walk you through setting up a GitHub account, creating a repository, and generating a Personal Access Token (PAT) to use Git from your local machine.</p>"},{"location":"Git/06_setup_Github/#1-create-a-github-account","title":"1. Create a GitHub Account","text":""},{"location":"Git/06_setup_Github/#steps","title":"Steps:","text":"<ol> <li>Go to GitHub.</li> <li>Click the Sign Up button at the top-right corner.</li> <li>Fill in the following details:</li> <li>Email Address: Enter your email.</li> <li>Username: Choose a unique username.</li> <li>Password: Create a strong password.</li> <li>Solve the CAPTCHA, then click Create Account.</li> <li>Verify your email by clicking the link sent to your inbox.</li> <li>Follow any additional steps to personalize your profile.</li> </ol>"},{"location":"Git/06_setup_Github/#2-create-a-new-repository","title":"2. Create a New Repository","text":""},{"location":"Git/06_setup_Github/#steps_1","title":"Steps:","text":"<ol> <li>Once logged in, click the + icon in the top-right corner.</li> <li>Select New Repository.</li> <li>Fill out the repository details:</li> <li>Repository Name: Enter a name for your project (e.g., <code>my-first-repo</code>).</li> <li>Description (Optional): Add a short description of your project.</li> <li>Choose the repository's visibility:</li> <li>Public: Anyone can see your repository.</li> <li>Private: Only you and collaborators can see it.</li> <li>(Optional) Check Add a README file if you want a basic introduction file in your repository.</li> <li>Click Create Repository.</li> </ol>"},{"location":"Git/06_setup_Github/#3-generate-a-personal-access-token-pat","title":"3. Generate a Personal Access Token (PAT)","text":""},{"location":"Git/06_setup_Github/#what-is-a-pat","title":"What is a PAT?","text":"<p>A Personal Access Token (PAT) acts as a password when accessing your GitHub account via the command line.</p>"},{"location":"Git/06_setup_Github/#steps-to-generate-a-pat","title":"Steps to Generate a PAT:","text":"<ol> <li>Go to GitHub Settings.</li> <li>Scroll down to Developer Settings and click it.</li> <li>Click on Personal Access Tokens &gt; Tokens (classic).</li> <li>Click Generate new token &gt; Generate new token (classic).</li> <li>Fill out the token details:</li> <li>Note: Enter a description like <code>My PAT</code>.</li> <li>Expiration: Choose when the token should expire (e.g., 30 days, 60 days, or no expiration).</li> <li>Scopes: Select the permissions the token needs. For basic Git operations, check:<ul> <li><code>repo</code> (Full control of private repositories).</li> <li><code>workflow</code> (Access to workflows).</li> <li><code>write:packages</code> (Push to GitHub Packages).</li> </ul> </li> <li>Click Generate Token.</li> <li>Copy the token immediately. Once you leave this page, you cannot view it again.</li> </ol>"},{"location":"Git/06_setup_Github/#4-save-the-pat-locally","title":"4. Save the PAT Locally","text":""},{"location":"Git/06_setup_Github/#option-1-save-the-pat-in-a-secure-file","title":"Option 1: Save the PAT in a Secure File","text":"<ol> <li>Open a terminal or command prompt.</li> <li>Navigate to your home directory:</li> </ol> <pre><code>cd ~\n</code></pre>"},{"location":"Git/06_setup_Github/#create-a-git-credentials-file","title":"Create a .git-credentials file","text":"<pre><code>touch .git-credentials\n</code></pre>"},{"location":"Git/06_setup_Github/#open-the-file-with-a-text-editor","title":"Open the file with a text editor","text":"<pre><code>nano .git-credentials\n</code></pre>"},{"location":"Git/06_setup_Github/#add-the-following-content-replace-and","title":"Add the following content (replace  and ): <pre><code>https://&lt;your-username&gt;:&lt;your-pat&gt;@github.com\n</code></pre>","text":""},{"location":"Git/06_setup_Github/#save-and-exit","title":"Save and exit: <p>In Nano: Press Ctrl+O to save and Ctrl+X to exit.</p>","text":""},{"location":"Git/06_setup_Github/#option-2-cache-the-pat-globally","title":"Option 2:  Cache the PAT Globally","text":""},{"location":"Git/06_setup_Github/#enable-credential-caching","title":"Enable credential caching: <p><pre><code>git config --global credential.helper store\n</code></pre> - Perform a Git operation like git push, and you\u2019ll be prompted for your username and PAT. Once entered, it will be saved for future use.</p>","text":""},{"location":"Git/06_setup_Github/#example-workflow","title":"Example Workflow <p>Here\u2019s how to use your PAT and repository:   ### Clone your repository:</p> <pre><code>git clone https://github.com/&lt;your-username&gt;/&lt;repo-name&gt;.git\n</code></pre>","text":""},{"location":"Git/06_setup_Github/#make-changes-and-commit","title":"Make changes and commit:","text":"<pre><code>git add .\n\ngit commit -m \"Initial commit\"\n</code></pre>"},{"location":"Git/06_setup_Github/#push-to-github","title":"Push to GitHub","text":"<pre><code>git push\n</code></pre>"},{"location":"Git/06_setup_Github/#enter-your-username-and-pat-when-prompted-only-needed-once-if-cached","title":"Enter your username and PAT when prompted (only needed once if cached).","text":""},{"location":"Git/07_git_credentials_email/","title":"Git Credentials &amp; Email Management","text":"<p>If your Git is showing different credentials and you want to switch from one email ID to another for a specific repository or globally, follow these steps:</p>"},{"location":"Git/07_git_credentials_email/#1-update-git-email-for-a-specific-repository","title":"1. Update Git Email for a Specific Repository","text":"<p>Inside your repository, run:</p> <pre><code>git config user.email \"your-new-email@example.com\"\n</code></pre> <p>To verify: <pre><code>git config --get user.email\n</code></pre></p>"},{"location":"Git/07_git_credentials_email/#2-update-git-email-globally","title":"2. Update Git Email Globally","text":"<p>If you want to change the email for all repositories: <pre><code>git config --global user.email \"your-new-email@example.com\"\n</code></pre></p> <p>To verify: <pre><code>git config --global --get user.email\n</code></pre></p>"},{"location":"Git/07_git_credentials_email/#3-clear-cached-credentials-if-git-is-using-old-credentials","title":"3. Clear Cached Credentials (If Git Is Using Old Credentials)","text":"<p>If Git is using an old email linked to cached credentials, clear them:</p> Mac/LinuxWindows (Credential Manager): <pre><code>git credential reject https://github.com\n</code></pre> <pre><code>cmdkey /delete:git:https://github.com\n</code></pre> <p>Or manually go to Control Panel &gt; Credential Manager &gt; Windows Credentials and remove GitHub credentials.</p>"},{"location":"Git/07_git_credentials_email/#4-remove-stored-credentials","title":"4. Remove Stored Credentials","text":"<p>If you previously saved credentials in ~/.git-credentials, remove them: <pre><code>rm ~/.git-credentials\ngit config --global --unset credential.helper\n</code></pre></p>"},{"location":"Git/07_git_credentials_email/#5-log-in-with-new-credentials","title":"5. Log in with New Credentials","text":"<p>Once credentials are cleared, the next Git operation (push, pull, fetch) will ask for new credentials. When prompted, enter your correct GitHub/GitLab email and PAT (Personal Access Token if needed).</p> <p>If using HTTPS authentication:</p> <pre><code>git push origin main\n</code></pre> <p>If using SSH, update the key: <pre><code>ssh-keygen -t rsa -b 4096 -C \"your-new-email@example.com\"\n</code></pre></p> <p>Then add it to GitHub/GitLab.</p>"},{"location":"Git/07_git_credentials_email/#6-verify-new-credentials-in-commit-history","title":"6. Verify New Credentials in Commit History","text":"<p>To check if your new email is used in commits:</p> <pre><code>git log --pretty=format:\"%h - %an &lt;%ae&gt;\"\n</code></pre>"},{"location":"Git/07_git_credentials_email/#7-change-email-in-past-commits-if-necessary","title":"7. Change Email in Past Commits (If Necessary)","text":"<p>If you want to update your email in past commits, use: <pre><code>git filter-branch --env-filter '\nOLD_EMAIL=\"old@example.com\"\nCORRECT_NAME=\"Your Name\"\nCORRECT_EMAIL=\"your-new-email@example.com\"\n\nif [ \"$GIT_COMMITTER_EMAIL\" = \"$OLD_EMAIL\" ]\nthen\n    export GIT_COMMITTER_NAME=\"$CORRECT_NAME\"\n    export GIT_COMMITTER_EMAIL=\"$CORRECT_EMAIL\"\nfi\nif [ \"$GIT_AUTHOR_EMAIL\" = \"$OLD_EMAIL\" ]\nthen\n    export GIT_AUTHOR_NAME=\"$CORRECT_NAME\"\n    export GIT_AUTHOR_EMAIL=\"$CORRECT_EMAIL\"\nfi\n' --tag-name-filter cat -- --branches --tags\n</code></pre></p> <p>Warning</p> <p>This rewrites history. Use only if necessary.</p>"},{"location":"Git/07_git_credentials_email/#8-test-with-a-new-commit","title":"8. Test with a New Commit","text":"<p>Ensure everything is set correctly by making a test commit:</p> <pre><code>git commit --allow-empty -m \"Testing new email\"\ngit log -1\n</code></pre>"},{"location":"Git/07_git_credentials_email/#9-push-changes-to-remote-if-needed","title":"9. Push Changes to Remote (If Needed)","text":"<p>If you rewrote history in step 7, you must force-push: <pre><code>git push --force origin main\n</code></pre></p> <p>Warning</p> <p>Be cautious\u2014this rewrites history for everyone.</p> <p>If you frequently switch between multiple Git accounts, consider using SSH keys or different Git configurations per repository.</p>"},{"location":"PCB_Design/01pcb/","title":"How to Build PCB","text":""},{"location":"ProblemSolving/Level%201/Problems/","title":"Level 1 Problems","text":"<ul> <li> <p> Get a number from user and add 2 to that number and print the result.</p> </li> <li> <p> Get a number from user and subtract 5 to that number and print the result.</p> </li> <li> <p> Get a number from user and multiply 3 to that number and print the result.</p> </li> <li> <p> Get a number from user and divide by the number by 6 and print the quotient.</p> </li> <li> <p> Get a number from user and divide by the number by 8 and print the remainder.</p> </li> <li> <p> Get a two-digit number from user and print the one\u2019s digit.</p> </li> <li> <p> Get a two-digit number from user and print the ten\u2019s digit.</p> </li> <li> <p> Get a three-digit number from user and print the one\u2019s digit.</p> </li> <li> <p> Get a three-digit number from user and print the hundred\u2019s digit.</p> </li> <li> <p> Get a three-digit number from user and print the ten\u2019s digit.</p> </li> <li> <p> Get a three-digit number from user and print the ten\u2019s digit.</p> </li> <li> <p> Get a three-digit number from user and print sum the digits.</p> </li> <li> <p> Get a two-digit number from user and print the reverse of the number.</p> </li> <li> <p> Get a three-digit number from user and print the reverse of the number.</p> </li> <li> <p> Get a four-digit number from user and only reverse the  first two digits of the number, then print the number.</p> </li> </ul> <pre><code>Input: 9561 Output 9516. \nInput: 3859 Output: 3895.\n</code></pre> <ul> <li> Get a four-digit number from user and only reverse the last two digits of the number, then print the number.</li> </ul> <pre><code> Input: 9561 Output 5961. Input: 3859 Output: 8359\n</code></pre> <ul> <li> Get a two-digit number from user and make the one\u2019s digit</li> </ul> <pre><code>Input: 95 Output 90. \nInput: 18 Output: 10\n</code></pre> <ul> <li> Get a two-digit number from user and make the ten\u2019s digit 1, then print it.</li> </ul> <pre><code>Input: 95 Output 15. \nInput: 82 Output: 12\n</code></pre> <ul> <li> <p> Get a three-digit number from user and make the one\u2019s digit as 2, then print it.</p> </li> <li> <p> Get a three-digit number from user and make the ten\u2019s digit as 0, then print it.  <pre><code>Input: 695 Output 605. \nInput: 182 Output: 102\n</code></pre></p> </li> <li> <p> Get a number from user and subtract 5 from that number if the number is odd, then print the result. Do not use \u201cif\u201d. </p> </li> <li> <p> Get a number from user and subtract 5 from that number if the number\u2019s  ten\u2019s position digit is odd, then print the result. Do not use \u201cif\u201d. </p> </li> </ul> <pre><code> Input: 685 Output 685. \n Input: 89172 Output: 89167\n</code></pre> <ul> <li> Get a two digit number from user and subtract 5 from that number if the sum of the digits of the number is odd, then print the result. Do not use \u201cif\u201d.</li> </ul> <pre><code>Input: 95 Output 95. \nInput: 72 Output: 67\n</code></pre> <ul> <li> Get a three-digit number from user and subtract 5 from that number if one\u2019s digit number and 100\u2019s digit number are same, then print the result. Do not use \u201cif\u201d.</li> </ul> <pre><code>Input: 595 Output 590.\nInput: 372 Output: 372\n</code></pre> <ul> <li> Get a four-digit number from user and subtract 5 from that number if ten\u2019s digit position and 100\u2019s digit position is same, then print the result. Do not use \u201cif\u201d.</li> </ul> <pre><code>Input: 7595 Output 7595. \nInput: 3772 Output: 3767\n</code></pre> <ul> <li> <p> Get a three-digit number from user. If the sum of the digits is 10 then print \u201cSuccess\u201d, otherwise print \u201cFailure\u201d.</p> </li> <li> <p> Get a three-digit number from user. If the sum of the one\u2019s digit and hundred\u2019s digit is less than 10, then print \u201cSuccess\u201d, otherwise print \u201cFailure\u201d.</p> </li> <li> <p> Get a three-digit number from user. If the sum of the one\u2019s digit and hundred\u2019s digit is less than 10, then print \u201cSuccess\u201d, otherwise print \u201cFailure\u201d.</p> </li> <li> <p> Get a four-digit number from user. If the sum of the ten\u2019s digit and hundred\u2019s digit is greater than 10, then print \u201cSuccess\u201d, otherwise print \u201cFailure\u201d.</p> </li> <li> <p> Get a four-digit number from user. If the sum of the ten\u2019s digit and hundred\u2019s digit is equal to 10, and one of the digits is more than 7 then print \u201cSuccess\u201d, otherwise print \u201cFailure\u201d.</p> </li> </ul> <pre><code>Input: 4649 \u2013 Output: Failure.\nInput: 9286 - Output: Success.\n</code></pre> <ul> <li> Get a three-digit number from user. If the sum of the digits is less than 10, then print the sum, otherwise add the digits of the sum and print the sum. Note: The result should be always single digit only.</li> </ul> <pre><code>Input: 123 \u2013 Output: 6\nInput: 149 - Output: 5 (149:1+4+9 = 14: 1+4 = 5)\nInput: 991 - Output: 1 (991: 9+9+1 = 19: 1+9 = 10: 1+0 = 1)\n</code></pre> <ul> <li> Get two 2-digit numbers from user. If the sum of the numbers is less than 100, then  print the sum, otherwise print the difference.</li> </ul> <pre><code>Input: 56 78 \u2013 Output: 22\nInput: 14 65 - Output: 79\n</code></pre> <ul> <li> Get two 2-digit numbers from user. Print the sum of digits of the biggest number.</li> </ul> <pre><code>Input: 56 78 \u2013 Output: 15\nInput: 14 65 - Output: 11\n</code></pre> <ul> <li> Get two 3-digit numbers from user. Print the difference between the one\u2019s digit and hundred\u2019s digit of the number whose ten\u2019s digit is bigger than the other number\u2019s ten\u2019s digit.</li> </ul> <pre><code>Input: 856 978 \u2013 Output: 1\nInput: 128 365 - Output: 2\n</code></pre> <ul> <li> Add the one\u2019s digit and hundred\u2019s digit of both the numbers.  Print the sum of all the digits of the number whose sum of one\u2019s and hundred\u2019s digits is bigger.</li> </ul> <pre><code>Input: 856 978 \u2013 Output: 24\nInput: 128 365 - Output: 11\n</code></pre>"},{"location":"ProblemSolving/Level%202/Problems/","title":"Level 2 Problems","text":""},{"location":"VLSI/01vlsi/","title":"Introduction to VLSI","text":""},{"location":"blog/","title":"Blog","text":""}]}